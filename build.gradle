group 'rfxlab'
version = '1.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven {
    	url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    compile(            
             'io.vertx:vertx-core:3.4.2'			
			,'com.google.code.gson:gson:2.8.2'    		
			,'log4j:log4j:1.2.17'
			,'org.jsoup:jsoup:1.11.2'					
			,'org.apache.commons:commons-lang3:3.3.2'
			,'commons-net:commons-net:3.6'
			,'commons-io:commons-io:2.5'   		
			,'redis.clients:jedis:2.9.0'
			,'org.apache.httpcomponents:httpclient:4.5.3'
            
            ,'org.yaml:snakeyaml:1.18' 
            ,'com.google.guava:guava:22.0'            
            ,'org.apache.commons:commons-csv:1.2'
                      
            // VertX web for REST API
            ,'io.vertx:vertx-web:3.4.2'            
            
            // RFX all libs
            ,'rfx:rfx-core:1.0'
            ,'rfx:rfx-data-util:1.0'  
            ,'rfx:rfx-stream:1.0'        						
            ,'rfx:rfx-track:1.0'
           
           	// Hadoop 
           	,'org.apache.hadoop:hadoop-common:2.7.4'
           
            // Apache Spark
            ,'org.apache.spark:spark-core_2.11:2.1.2'
			,'org.apache.spark:spark-sql_2.11:2.1.2'
			,'org.apache.spark:spark-mllib_2.11:2.1.2'
			,'com.fasterxml.jackson.module:jackson-module-scala_2.11:2.9.2'
    )
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/BUILD-OUTPUT")
}

def getClasspathStringJars() {
    def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }

    def classpath = fileNames.join(" ; ")
    return classpath
}

// copy configs
task CopyConfigs(type: Copy) {  
  into "BUILD-OUTPUT/configs"  
  from files('configs')
}

// copy dependency libs
task CopyRuntimeLibs(type: Copy) {  
  into "BUILD-OUTPUT/deps"  
  from configurations.compile  
}

task BuildMainStarter(type: Jar) {
    dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'video-recommender'
    def classpath = '. ; ' + getClasspathStringJars() + ' ; '
    manifest {
        attributes('Implementation-Title': 'ApiDataHttpServer',
                'Implementation-Version': version,
                'Main-Class': 'rfxlab.com.server.ApiDataHttpServer',
                'Class-Path': classpath)
    }
}

// copy and deploy 
task BuildDeployToRemoteServers(type: Exec) {    
    commandLine 'sh', './shell-scripts/deploy.sh'
}

